// Generated by CoffeeScript 1.6.3
(function() {
  var AnimatingExperiments, CollapsibleTree, CollapsibleTreeLoader, FlattenVotingTree, NodeEmitter,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  CollapsibleTree = function($resource) {
    return $resource('z_collapsible.json');
  };

  CollapsibleTreeLoader = function(CollapsibleTree, $q) {
    return function() {
      var delay;
      delay = $q.defer();
      CollapsibleTree.get({}, function(root) {
        return delay.resolve(root);
      }, function() {
        return delay.reject('Unable to locate CollapsibleTree ');
      });
      return delay.promise;
    };
  };

  FlattenVotingTree = function() {
    return function(scope, json) {
      var i, l, links, nodes, recurse;
      recurse = function(h) {
        if (h.type === 'hub') {
          if (!h.id) {
            h.id = i++;
          }
          if (!h.hidden) {
            h.hidden = false;
          }
          h.forceViewCharge = -900;
          nodes.push(h);
          if (h.children) {
            return h.children.forEach(function(t) {
              var link;
              if (!t.id) {
                t.id = i++;
              }
              if (!t.hidden) {
                t.hidden = false;
              }
              t.hiddenParent = h.hidden;
              t.forceViewCharge = -400;
              nodes.push(t);
              link = {
                id: ++l,
                source: h,
                target: t,
                linkDistance: 133
              };
              links.push(link);
              if (t.children) {
                return t.children.forEach(function(p) {
                  if (!p.id) {
                    p.id = i++;
                  }
                  if (!p.hidden) {
                    p.hidden = false;
                  }
                  if (t.hidden === true || t.hiddenParent === true) {
                    p.hiddenParent = true;
                  } else {
                    p.hiddenParent = false;
                  }
                  p.forceViewCharge = -200;
                  nodes.push(p);
                  link = {
                    id: ++l,
                    source: t,
                    target: p,
                    linkDistance: 100
                  };
                  links.push(link);
                  if (p.children) {
                    return p.children.forEach(function(v) {
                      v.type = 'voter';
                      v.topicVoterId = t.id + '-' + v.name;
                      v.parent = {};
                      if (!v.id) {
                        v.id = i++;
                      }
                      if (!v.hidden) {
                        v.hidden = false;
                      }
                      if (p.hidden === true || p.hiddenParent === true) {
                        v.hiddenParent = true;
                      } else {
                        v.hiddenParent = false;
                      }
                      v.forceViewCharge = -150;
                      nodes.push(v);
                      link = {
                        id: ++l,
                        source: p,
                        target: v,
                        topicVoterId: t.id + '-' + v.name,
                        linkDistance: 40
                      };
                      return links.push(link);
                    });
                  }
                });
              }
            });
          }
        }
      };
      nodes = [];
      links = [];
      i = 0;
      l = 0;
      recurse(json);
      scope.options.max = links.length + 1;
      scope.flattenedNodesAndLinks = {
        nodes: nodes,
        links: links
      };
      return console.log("Initialized nodes And Links: ", scope.flattenedNodesAndLinks);
    };
  };

  NodeEmitter = function() {
    return function(scope) {
      var i, l, links, linksBytopicVoterId, nodes, nodesAndLinks, targets, ts, uniqLinksByTopic;
      ts = scope.options.currentNode;
      nodesAndLinks = scope.flattenedNodesAndLinks;
      links = nodesAndLinks.links.filter(function(l) {
        return l.id < ts;
      });
      linksBytopicVoterId = _.chain(links).sortBy(['topicVoterId', 'id']).value();
      uniqLinksByTopic = [];
      i = 0;
      l = links.length;
      while (i < (l - 1)) {
        if (linksBytopicVoterId[i + 1].topicVoterId && linksBytopicVoterId[i + 1].topicVoterId === linksBytopicVoterId[i].topicVoterId) {
          if (linksBytopicVoterId[i + 1].hidden === void 0 && linksBytopicVoterId[i].hidden === void 0 && nodesAndLinks.nodes[linksBytopicVoterId[i + 1].target.id].parent) {
            nodesAndLinks.nodes[linksBytopicVoterId[i + 1].target.id].parent.x = nodesAndLinks.nodes[linksBytopicVoterId[i].target.id].x;
            nodesAndLinks.nodes[linksBytopicVoterId[i + 1].target.id].parent.y = nodesAndLinks.nodes[linksBytopicVoterId[i].target.id].y;
          }
        } else {
          if (!(nodesAndLinks.nodes[linksBytopicVoterId[i].source.id].hidden === true || nodesAndLinks.nodes[linksBytopicVoterId[i].source.id].hiddenParent === true)) {
            uniqLinksByTopic.push(linksBytopicVoterId[i]);
          }
        }
        i++;
      }
      if (!(i === 0 || nodesAndLinks.nodes[linksBytopicVoterId[i].source.id].hidden === true || nodesAndLinks.nodes[linksBytopicVoterId[i].source.id].hiddenParent === true)) {
        uniqLinksByTopic.push(linksBytopicVoterId[i]);
      }
      targets = _.chain(uniqLinksByTopic).pluck('target').pluck('id').value();
      nodes = nodesAndLinks.nodes.filter(function(d) {
        var _ref;
        if (targets.length > 0) {
          return (_ref = d.id, __indexOf.call(targets, _ref) >= 0) || d.id === 0;
        } else if (ts > 0) {
          return d.type === 'hub';
        }
      });
      return scope.nodesAndLinks = {
        nodes: nodes,
        links: uniqLinksByTopic
      };
    };
  };

  AnimatingExperiments = function() {
    return function(scope, enterNodes, nodes, enterLinks, links) {
      var i;
      i = 0;
      return enterLinks.style({
        stroke: "red",
        opacity: 0
      }).transition().delay(function(d) {
        if (d) {
          return (i++) * 50;
        }
      }).duration(0).each("end", function(d) {
        d3.select("svg").selectAll('.voter-ring').data([d.target], function(d) {
          return d.id;
        }).style({
          stroke: '#DC143C',
          'stroke-width': '2',
          opacity: .9
        }).transition().duration(3500).style({
          stroke: '#556B2F',
          'stroke-width': '1'
        }).transition().duration(250).style({
          opacity: 1
        });
        return d3.select(this).style({
          opacity: 1
        }).transition().duration(750).style({
          stroke: "#ddd",
          opacity: 1
        });
      });
    };
  };

  App.Services.factory('CollapsibleTree', CollapsibleTree);

  App.Services.factory('CollapsibleTreeLoader', CollapsibleTreeLoader);

  App.Services.factory('FlattenVotingTree', FlattenVotingTree);

  App.Services.factory('NodeEmitter', NodeEmitter);

  App.Services.factory('AnimatingExperiments', AnimatingExperiments);

}).call(this);
